{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Welcome to mcp-framework, a modern, provider-based framework for building Model Context Protocol (MCP) servers. This framework provides clean separation between protocol implementation and business logic through abstract provider classes and plugin registry system.</p>"},{"location":"#what-is-mcp","title":"What is MCP?","text":"<p>The Model Context Protocol is an open standard that enables AI assistants to securely access external tools and resources. MCP servers provide tools, resources, and prompts that AI models can use to perform tasks.</p>"},{"location":"#why-mcp-framework","title":"Why mcp-framework?","text":""},{"location":"#provider-architecture","title":"\ud83c\udfd7\ufe0f Provider Architecture","text":"<ul> <li>Abstract Base Classes: Clean contracts for <code>ResourceProvider</code>, <code>ToolProvider</code>, and <code>PromptProvider</code></li> <li>Plugin Registry: Dynamic provider registration and lifecycle management</li> <li>Framework Separation: Protocol handling vs business logic isolation</li> </ul>"},{"location":"#developer-experience","title":"\ud83d\ude80 Developer Experience","text":"<ul> <li>TypeScript First: Full type safety with strict checking</li> <li>Builder Pattern: Fluent API for server construction</li> <li>Configuration Support: JSON/YAML declarative configuration with environment variable interpolation</li> <li>Plugin Discovery: Automatic provider loading from directories and NPM packages</li> </ul>"},{"location":"#production-ready","title":"\ud83d\udce6 Production Ready","text":"<ul> <li>Health Monitoring: Built-in health checks and metrics endpoints</li> <li>Error Handling: Comprehensive error management with MCP-compliant responses</li> <li>Performance: Connection pooling, caching, and optimization features</li> <li>Security: Input validation, SQL injection prevention, XSS protection</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>import { FrameworkBuilder } from '@debian777/mcp-framework';\n\n// Create a simple MCP server\nconst server = await new FrameworkBuilder()\n  .withTransport('stdio')\n  .withStorage({ type: 'sqlite', path: './data.db' })\n  .build();\n\nawait server.start();\n</code></pre>"},{"location":"#architecture-overview","title":"Architecture Overview","text":"<pre><code>Framework (mcp-framework)\n\u251c\u2500\u2500 Transport Layer (STDIO, HTTP)\n\u251c\u2500\u2500 JSON-RPC Protocol\n\u251c\u2500\u2500 Provider Registry\n\u2514\u2500\u2500 Infrastructure (Storage, Logging, Security)\n\nBusiness Logic (Your Code)\n\u251c\u2500\u2500 ResourceProvider implementations\n\u251c\u2500\u2500 ToolProvider implementations\n\u2514\u2500\u2500 PromptProvider implementations\n</code></pre>"},{"location":"#key-components","title":"Key Components","text":"Component Purpose Key Classes Transport Communication protocols <code>StdioTransport</code>, <code>HttpTransport</code> Server MCP protocol implementation <code>FrameworkServer</code> Providers Business logic abstraction <code>ToolProvider</code>, <code>ResourceProvider</code>, <code>PromptProvider</code> Registry Provider management <code>ProviderRegistry</code> Builder Fluent server construction <code>FrameworkBuilder</code>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Installation: Add mcp-framework to your project</li> <li>Basic Server: Create your first MCP server</li> <li>Adding Providers: Implement tools, resources, and prompts</li> <li>Configuration: Configure your server for production</li> </ol>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>\ud83d\udcd6 Documentation: Comprehensive guides and API reference</li> <li>\ud83d\udc1b Issues: Report bugs and request features</li> <li>\ud83d\udcac Discussions: Ask questions and share ideas</li> <li>\ud83d\udce6 NPM: Install the framework</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p> <p>Built with \u2764\ufe0f for the Model Context Protocol ecosystem</p>"},{"location":"core-concepts/","title":"Core Concepts","text":"<p>This guide explains the fundamental concepts and architecture of mcp-framework. Understanding these concepts is essential for building effective MCP servers.</p>"},{"location":"core-concepts/#model-context-protocol-mcp","title":"Model Context Protocol (MCP)","text":"<p>MCP is an open protocol that standardizes how AI assistants can securely access external tools and resources. It defines a JSON-RPC-based communication protocol between:</p> <ul> <li>MCP Clients: AI assistants (like Claude, ChatGPT) that want to use external capabilities</li> <li>MCP Servers: Applications that provide tools, resources, and prompts to clients</li> </ul>"},{"location":"core-concepts/#protocol-components","title":"Protocol Components","text":"<p>MCP defines three main types of capabilities:</p> <ol> <li>Tools: Actions that clients can invoke to perform tasks</li> <li>Resources: Data sources that clients can read from</li> <li>Prompts: Reusable prompt templates for consistent interactions</li> </ol>"},{"location":"core-concepts/#framework-architecture","title":"Framework Architecture","text":"<p>mcp-framework provides a clean separation between protocol implementation and business logic:</p> <pre><code>Framework Layer (mcp-framework)\n\u251c\u2500\u2500 Transport Layer (STDIO, HTTP, WebSocket)\n\u251c\u2500\u2500 JSON-RPC Protocol Handler\n\u251c\u2500\u2500 Provider Registry\n\u2514\u2500\u2500 Infrastructure (Storage, Logging, Security)\n\nBusiness Logic Layer (Your Code)\n\u251c\u2500\u2500 ToolProvider implementations\n\u251c\u2500\u2500 ResourceProvider implementations\n\u2514\u2500\u2500 PromptProvider implementations\n</code></pre>"},{"location":"core-concepts/#key-principles","title":"Key Principles","text":"<ul> <li>Separation of Concerns: Framework handles protocol, you handle business logic</li> <li>Provider Pattern: Abstract base classes define contracts for implementations</li> <li>Plugin Architecture: Dynamic registration and discovery of providers</li> <li>Type Safety: Full TypeScript support with strict type checking</li> </ul>"},{"location":"core-concepts/#providers","title":"Providers","text":"<p>Providers are the core abstraction in mcp-framework. They encapsulate business logic and define how your MCP server interacts with the world.</p>"},{"location":"core-concepts/#toolprovider","title":"ToolProvider","text":"<p>Tools allow AI assistants to perform actions in your system.</p> <pre><code>abstract class ToolProvider {\n  abstract getToolDefinitions(): ToolDefinition[];\n  abstract callTool(name: string, args: any, requestId?: string): Promise&lt;any&gt;;\n}\n</code></pre> <p>Key Concepts: - Tool Definitions: Metadata about available tools (name, description, parameters) - Tool Execution: Actual implementation of tool logic - Error Handling: Proper error responses for failed operations</p>"},{"location":"core-concepts/#resourceprovider","title":"ResourceProvider","text":"<p>Resources provide access to data that AI assistants can read.</p> <pre><code>abstract class ResourceProvider {\n  abstract getStaticResources(): Resource[];\n  abstract readResource(uri: string): Promise&lt;ResourceContent&gt;;\n}\n</code></pre> <p>Key Concepts: - Static Resources: Pre-defined resources with fixed URIs - Dynamic Resources: Resources discovered at runtime - URI Schemes: Custom URI schemes for organizing resources - Content Types: Proper MIME type handling</p>"},{"location":"core-concepts/#promptprovider","title":"PromptProvider","text":"<p>Prompts provide reusable prompt templates for consistent AI interactions.</p> <pre><code>abstract class PromptProvider {\n  abstract getPromptDefinitions(): PromptDefinition[];\n  abstract getPrompt(name: string, args?: any): Promise&lt;PromptContent&gt;;\n}\n</code></pre> <p>Key Concepts: - Prompt Templates: Reusable prompt structures - Parameterization: Dynamic prompt content based on arguments - Message Sequences: Multi-turn conversation templates</p>"},{"location":"core-concepts/#transport-layer","title":"Transport Layer","text":"<p>The transport layer handles communication between MCP clients and servers.</p>"},{"location":"core-concepts/#stdio-transport","title":"STDIO Transport","text":"<p>Used for local development and direct process communication:</p> <pre><code>const server = await new FrameworkBuilder()\n  .withTransport('stdio')\n  .build();\n</code></pre> <p>Use Cases: - Local development and testing - Direct process integration - Simple deployment scenarios</p>"},{"location":"core-concepts/#http-transport","title":"HTTP Transport","text":"<p>Used for remote communication and web-based deployments:</p> <pre><code>const server = await new FrameworkBuilder()\n  .withTransport({\n    mode: 'http',\n    port: 3000,\n    path: '/mcp'\n  })\n  .build();\n</code></pre> <p>Features: - RESTful endpoints for MCP protocol - Health check endpoints - Metrics and monitoring - CORS support</p>"},{"location":"core-concepts/#websocket-transport","title":"WebSocket Transport","text":"<p>For real-time, bidirectional communication:</p> <pre><code>const server = await new FrameworkBuilder()\n  .withTransport({\n    mode: 'websocket',\n    port: 3001,\n    path: '/mcp-ws'\n  })\n  .build();\n</code></pre>"},{"location":"core-concepts/#storage-abstraction","title":"Storage Abstraction","text":"<p>mcp-framework provides a unified storage interface for persisting data:</p> <pre><code>interface StorageInterface {\n  save(input: SaveInput): Promise&lt;MemoryItem&gt;;\n  load(filter: LoadFilter): Promise&lt;MemoryItem[]&gt;;\n  update(id: string, input: UpdateInput): Promise&lt;MemoryItem&gt;;\n  delete(id: string): Promise&lt;void&gt;;\n}\n</code></pre>"},{"location":"core-concepts/#built-in-backends","title":"Built-in Backends","text":"<ul> <li>SQLite: Local file-based storage, good for development</li> <li>PostgreSQL: Production-ready relational database</li> <li>Custom: Implement your own storage backend</li> </ul>"},{"location":"core-concepts/#storage-configuration","title":"Storage Configuration","text":"<pre><code>const server = await new FrameworkBuilder()\n  .withStorage({\n    type: 'sqlite',\n    path: './data.db'\n  })\n  .build();\n</code></pre>"},{"location":"core-concepts/#configuration-system","title":"Configuration System","text":"<p>mcp-framework supports multiple configuration approaches:</p>"},{"location":"core-concepts/#environment-variables","title":"Environment Variables","text":"<pre><code>MCP_TRANSPORT_MODE=stdio\nMCP_STORAGE_TYPE=sqlite\nMCP_LOG_LEVEL=debug\n</code></pre>"},{"location":"core-concepts/#configuration-files","title":"Configuration Files","text":"<pre><code>{\n  \"server\": {\n    \"name\": \"my-mcp-server\",\n    \"version\": \"1.0.0\"\n  },\n  \"transport\": {\n    \"modes\": [\"stdio\"],\n    \"maxConcurrency\": 16\n  },\n  \"storage\": {\n    \"type\": \"sqlite\",\n    \"path\": \"./data.db\"\n  }\n}\n</code></pre>"},{"location":"core-concepts/#programmatic-configuration","title":"Programmatic Configuration","text":"<pre><code>const server = await new FrameworkBuilder()\n  .withTransport('stdio')\n  .withStorage({ type: 'sqlite', path: './data.db' })\n  .withToolProvider(new MyToolProvider())\n  .build();\n</code></pre>"},{"location":"core-concepts/#error-handling","title":"Error Handling","text":"<p>mcp-framework provides comprehensive error handling:</p>"},{"location":"core-concepts/#mcp-error-codes","title":"MCP Error Codes","text":"<ul> <li><code>-32700</code>: Parse error</li> <li><code>-32600</code>: Invalid request</li> <li><code>-32601</code>: Method not found</li> <li><code>-32602</code>: Invalid params</li> <li><code>-32603</code>: Internal error</li> <li><code>-32000</code>: Server error (custom)</li> </ul>"},{"location":"core-concepts/#error-responses","title":"Error Responses","text":"<pre><code>return {\n  jsonrpc: '2.0',\n  id: requestId,\n  error: {\n    code: -32000,\n    message: 'Something went wrong',\n    data: { details: 'Additional error information' }\n  }\n};\n</code></pre>"},{"location":"core-concepts/#framework-error-handling","title":"Framework Error Handling","text":"<p>The framework automatically handles: - Transport-level errors - JSON-RPC protocol errors - Provider execution errors - Configuration validation errors</p>"},{"location":"core-concepts/#security-considerations","title":"Security Considerations","text":""},{"location":"core-concepts/#input-validation","title":"Input Validation","text":"<ul> <li>All inputs validated against schemas</li> <li>Type coercion and sanitization</li> <li>Size limits enforced</li> <li>SQL injection prevention</li> </ul>"},{"location":"core-concepts/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<ul> <li>Framework provides auth hooks</li> <li>Implementations define specific mechanisms</li> <li>Secure credential storage</li> <li>Token validation and refresh</li> </ul>"},{"location":"core-concepts/#transport-security","title":"Transport Security","text":"<ul> <li>STDIO transport for local communication</li> <li>HTTPS support for HTTP transport</li> <li>Connection encryption</li> <li>Certificate validation</li> </ul>"},{"location":"core-concepts/#performance-optimization","title":"Performance Optimization","text":""},{"location":"core-concepts/#connection-pooling","title":"Connection Pooling","text":"<ul> <li>Database connection pooling</li> <li>HTTP client connection reuse</li> <li>Resource cleanup on shutdown</li> <li>Connection health monitoring</li> </ul>"},{"location":"core-concepts/#caching","title":"Caching","text":"<ul> <li>Built-in caching for expensive operations</li> <li>Configurable TTL and size limits</li> <li>Cache invalidation strategies</li> <li>Memory-efficient implementations</li> </ul>"},{"location":"core-concepts/#monitoring","title":"Monitoring","text":"<ul> <li>Health check endpoints</li> <li>Performance metrics</li> <li>Request tracing</li> <li>Error tracking</li> </ul>"},{"location":"core-concepts/#plugin-system","title":"Plugin System","text":"<p>mcp-framework supports dynamic provider loading:</p>"},{"location":"core-concepts/#plugin-discovery","title":"Plugin Discovery","text":"<pre><code>const server = await new FrameworkBuilder()\n  .withPluginDiscovery({\n    directories: ['./plugins'],\n    npmPackages: ['@my-org/mcp-plugins']\n  })\n  .build();\n</code></pre>"},{"location":"core-concepts/#plugin-structure","title":"Plugin Structure","text":"<pre><code>my-plugin/\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 index.ts  // Exports provider instances\n\u2514\u2500\u2500 dist/\n    \u2514\u2500\u2500 index.js\n</code></pre>"},{"location":"core-concepts/#best-practices","title":"Best Practices","text":""},{"location":"core-concepts/#provider-design","title":"Provider Design","text":"<ul> <li>Single Responsibility: Each provider should do one thing well</li> <li>Error Resilience: Handle errors gracefully and provide meaningful messages</li> <li>Type Safety: Use TypeScript interfaces for all data structures</li> <li>Documentation: Provide clear descriptions for tools, resources, and prompts</li> </ul>"},{"location":"core-concepts/#performance","title":"Performance","text":"<ul> <li>Async Operations: Use async/await for all I/O operations</li> <li>Resource Limits: Implement timeouts and size limits</li> <li>Caching: Cache expensive operations when appropriate</li> <li>Monitoring: Add logging and metrics for observability</li> </ul>"},{"location":"core-concepts/#security","title":"Security","text":"<ul> <li>Input Validation: Validate all inputs, never trust user data</li> <li>Error Messages: Don't leak sensitive information in error messages</li> <li>Access Control: Implement proper authorization checks</li> <li>Secure Defaults: Use secure defaults for all configuration options</li> </ul>"},{"location":"core-concepts/#testing","title":"Testing","text":"<ul> <li>Unit Tests: Test individual provider methods</li> <li>Integration Tests: Test complete server functionality</li> <li>Mock Providers: Use mock implementations for testing</li> <li>MCP Inspector: Test with the official MCP Inspector tool</li> </ul>"},{"location":"core-concepts/#migration-guide","title":"Migration Guide","text":""},{"location":"core-concepts/#from-custom-mcp-servers","title":"From Custom MCP Servers","text":"<p>If you're migrating from a custom MCP server implementation:</p> <ol> <li>Identify Components: Extract your tools, resources, and prompts</li> <li>Create Providers: Implement the appropriate provider interfaces</li> <li>Update Configuration: Migrate to framework configuration system</li> <li>Test Thoroughly: Ensure all functionality works as expected</li> </ol>"},{"location":"core-concepts/#from-other-frameworks","title":"From Other Frameworks","text":"<p>When migrating from other MCP frameworks:</p> <ol> <li>Preserve Business Logic: Keep your core functionality intact</li> <li>Adapt Interfaces: Update to mcp-framework provider interfaces</li> <li>Update Dependencies: Replace old framework dependencies</li> <li>Test Integration: Verify compatibility with your MCP clients</li> </ol>"},{"location":"core-concepts/#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Plugin Development</li> <li>Custom Storage Backends</li> <li>Transport Extensions</li> <li>Performance Tuning</li> </ul>"},{"location":"core-concepts/#next-steps","title":"Next Steps","text":"<p>Now that you understand the core concepts:</p> <ul> <li>Getting Started: Create your first MCP server</li> <li>Tools Guide: Learn about tool development</li> <li>Examples: See complete working examples</li> <li>API Reference: Detailed API documentation</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will walk you through setting up and creating your first MCP server using mcp-framework.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js 20+: Required for ESM modules and modern JavaScript features</li> <li>TypeScript: For type-safe development (optional but recommended)</li> <li>Basic MCP Knowledge: Familiarity with the Model Context Protocol</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>Install mcp-framework using npm:</p> <pre><code>npm install @debian777/mcp-framework\n</code></pre> <p>Or using yarn:</p> <pre><code>yarn add @debian777/mcp-framework\n</code></pre>"},{"location":"getting-started/#basic-server-setup","title":"Basic Server Setup","text":"<p>Create a simple MCP server that responds to basic protocol messages:</p> <pre><code>import { FrameworkBuilder } from '@debian777/mcp-framework';\n\n// Create a basic MCP server\nconst server = await new FrameworkBuilder()\n  .withTransport('stdio')  // Use STDIO transport for local development\n  .build();\n\n// Start the server\nawait server.start();\nconsole.log('MCP server is running...');\n</code></pre> <p>Save this as <code>server.ts</code> and run it:</p> <pre><code>npx tsx server.ts\n</code></pre> <p>This creates a minimal MCP server that can handle the basic protocol handshake but doesn't provide any tools, resources, or prompts yet.</p>"},{"location":"getting-started/#adding-providers","title":"Adding Providers","text":""},{"location":"getting-started/#tool-provider","title":"Tool Provider","text":"<p>Tools allow AI assistants to perform actions. Here's how to create a calculator tool:</p> <pre><code>import { ToolProvider } from '@debian777/mcp-framework';\n\nclass CalculatorProvider extends ToolProvider {\n  getToolDefinitions() {\n    return [{\n      name: 'calculate',\n      description: 'Perform mathematical calculations',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          expression: { type: 'string', description: 'Math expression to evaluate' }\n        },\n        required: ['expression']\n      }\n    }];\n  }\n\n  async callTool(name: string, args: any) {\n    if (name === 'calculate') {\n      try {\n        // Note: In production, use a safe math evaluation library\n        const result = eval(args.expression);\n        return {\n          content: [{ type: 'text', text: `Result: ${result}` }]\n        };\n      } catch (error) {\n        return {\n          content: [{ type: 'text', text: `Error: Invalid expression` }],\n          isError: true\n        };\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"getting-started/#resource-provider","title":"Resource Provider","text":"<p>Resources provide access to data that AI assistants can read:</p> <pre><code>import { ResourceProvider } from '@debian777/mcp-framework';\n\nclass FileSystemProvider extends ResourceProvider {\n  getStaticResources() {\n    return [{\n      uri: 'file://workspace',\n      name: 'Workspace Files',\n      description: 'Access to workspace files',\n      mimeType: 'application/json'\n    }];\n  }\n\n  async readResource(uri: string) {\n    if (uri === 'file://workspace') {\n      const files = await fs.readdir('.');\n      return {\n        contents: [{\n          uri,\n          mimeType: 'application/json',\n          text: JSON.stringify({ files }, null, 2)\n        }]\n      };\n    }\n    throw new Error(`Unknown resource: ${uri}`);\n  }\n}\n</code></pre>"},{"location":"getting-started/#prompt-provider","title":"Prompt Provider","text":"<p>Prompts provide reusable prompt templates:</p> <pre><code>import { PromptProvider } from '@debian777/mcp-framework';\n\nclass CodeReviewProvider extends PromptProvider {\n  getPromptDefinitions() {\n    return [{\n      name: 'code-review',\n      description: 'Generate a code review prompt for the given code'\n    }];\n  }\n\n  async getPrompt(name: string, args?: any) {\n    if (name === 'code-review') {\n      return {\n        description: 'Code review assistant prompt',\n        messages: [{\n          role: 'user',\n          content: {\n            type: 'text',\n            text: `Please review the following code for best practices, potential bugs, and improvements:\\n\\n${args?.code || 'No code provided'}`\n          }\n        }]\n      };\n    }\n  }\n}\n</code></pre>"},{"location":"getting-started/#complete-server-example","title":"Complete Server Example","text":"<p>Now let's combine all providers into a complete server:</p> <pre><code>import { FrameworkBuilder } from '@debian777/mcp-framework';\nimport { CalculatorProvider } from './providers/calculator.js';\nimport { FileSystemProvider } from './providers/filesystem.js';\nimport { CodeReviewProvider } from './providers/code-review.js';\n\n// Create and configure the server\nconst server = await new FrameworkBuilder()\n  .withTransport('stdio')\n  .withStorage({ type: 'sqlite', path: './data.db' })\n  .withToolProvider(new CalculatorProvider())\n  .withResourceProvider(new FileSystemProvider())\n  .withPromptProvider(new CodeReviewProvider())\n  .build();\n\n// Start the server\nawait server.start();\nconsole.log('MCP server with calculator, filesystem, and code review providers is running...');\n</code></pre>"},{"location":"getting-started/#configuration","title":"Configuration","text":""},{"location":"getting-started/#environment-variables","title":"Environment Variables","text":"<p>Configure your server using environment variables:</p> <pre><code># Transport settings\nMCP_TRANSPORT_MODE=stdio\nMCP_HTTP_PORT=3000\n\n# Storage settings\nMCP_STORAGE_TYPE=sqlite\nMCP_DATABASE_URL=./data.db\n\n# Logging\nMCP_LOG_LEVEL=debug\n</code></pre>"},{"location":"getting-started/#declarative-configuration","title":"Declarative Configuration","text":"<p>Create a <code>config.json</code> file for more complex configurations:</p> <pre><code>{\n  \"server\": {\n    \"name\": \"my-mcp-server\",\n    \"version\": \"1.0.0\"\n  },\n  \"transport\": {\n    \"modes\": [\"stdio\"],\n    \"maxConcurrency\": 16\n  },\n  \"storage\": {\n    \"type\": \"sqlite\",\n    \"path\": \"./data.db\"\n  },\n  \"logging\": {\n    \"level\": \"info\",\n    \"format\": \"json\"\n  }\n}\n</code></pre> <p>Load it in your server:</p> <pre><code>import { FrameworkBuilder } from '@debian777/mcp-framework';\n\nconst server = await new FrameworkBuilder()\n  .withConfigFile('./config.json')\n  .withToolProvider(new CalculatorProvider())\n  .build();\n</code></pre>"},{"location":"getting-started/#testing-your-server","title":"Testing Your Server","text":"<p>Test your MCP server using the MCP Inspector:</p> <pre><code># Install MCP Inspector globally\nnpm install -g @modelcontextprotocol/inspector\n\n# Run your server with the inspector\nmcp-inspector npx tsx server.ts\n</code></pre> <p>This will open a web interface where you can test your tools, resources, and prompts.</p>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Core Concepts: Learn about the framework architecture</li> <li>Tools Guide: Deep dive into tool development</li> <li>Resources Guide: Learn about resource providers</li> <li>Examples: See more complete examples</li> <li>Deployment: Deploy your server to production</li> </ul>"},{"location":"getting-started/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/#common-issues","title":"Common Issues","text":"<p>\"Module not found\" errors - Ensure you're using Node.js 20+ - Check that all dependencies are installed</p> <p>Transport connection errors - Verify the transport mode is correct for your use case - Check that ports are available for HTTP transport</p> <p>Provider registration failures - Ensure your providers extend the correct abstract base classes - Check that all required methods are implemented</p>"},{"location":"getting-started/#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Issues: Report bugs</li> <li>GitHub Discussions: Ask questions</li> <li>Documentation: Comprehensive guides</li> </ul>"},{"location":"api/COMPATIBILITY/","title":"Compatibility Matrix","text":"Framework Version Node.js LTS Notes 1.x 18, 20 Initial GA 2.x 20, 22 Dropped Node 18 support"},{"location":"api/COMPATIBILITY/#deprecation-policy","title":"Deprecation Policy","text":"<ul> <li>Functions flagged as deprecated remain for \u22651 minor release before removal.</li> <li>Deprecation must be noted in:</li> <li>README.md</li> <li>CHANGELOG.md</li> <li>Inline JSDoc <code>@deprecated</code> tag</li> </ul>"},{"location":"api/COMPATIBILITY/#example","title":"Example","text":"<p>```js /*  * @deprecated Use greet(name) instead.  / export function hello(name) {   return greet(name); }</p>"}]}