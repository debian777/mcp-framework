name: Deploy Documentation

on:
  push:
    branches: [main]
    paths:
      - 'docs/**'
      - 'src/**'
      - 'typedoc.json'
      - 'mkdocs.yml'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [main]
    paths:
      - 'docs/**'
      - 'src/**'
      - 'typedoc.json'
      - 'mkdocs.yml'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Generate API docs with TypeDoc
        run: npx typedoc

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install MkDocs and dependencies
        run: |
          pip install mkdocs mkdocs-material

      - name: Build MkDocs site
        run: mkdocs build

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          publish_branch: gh-pages
          cname: mcp-framework.pages.dev

      - name: Configure GitHub Pages site
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            // Ensure Pages is configured to use the gh-pages branch
            await github.rest.repos.updateBranchProtection({
              owner,
              repo,
              branch: 'gh-pages',
              required_status_checks: null,
              enforce_admins: false,
              required_pull_request_reviews: null,
              restrictions: null
            }).catch(()=>{});

            await github.rest.repos.createOrUpdatePagesSite({
              owner,
              repo,
              source: { branch: 'gh-pages', path: '/' }
            });

            // Set the CNAME file for the Pages site
            try {
              await github.rest.repos.createOrUpdateFileContents({
                owner,
                repo,
                path: 'CNAME',
                message: 'chore: set CNAME for GitHub Pages',
                content: Buffer.from('mcp-framework.pages.dev\n').toString('base64'),
              });
            } catch (e) {
              // If file exists, update it
              const { data: existing } = await github.rest.repos.getContent({ owner, repo, path: 'CNAME' });
              await github.rest.repos.createOrUpdateFileContents({
                owner,
                repo,
                path: 'CNAME',
                message: 'chore: update CNAME for GitHub Pages',
                content: Buffer.from('mcp-framework.pages.dev\n').toString('base64'),
                sha: existing.sha,
              });
            }