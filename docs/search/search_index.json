{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Welcome to mcp-framework, a modern, provider-based framework for building Model Context Protocol (MCP) servers. This framework provides clean separation between protocol implementation and business logic through abstract provider classes and plugin registry system.</p>"},{"location":"#what-is-mcp","title":"What is MCP?","text":"<p>The Model Context Protocol is an open standard that enables AI assistants to securely access external tools and resources. MCP servers provide tools, resources, and prompts that AI models can use to perform tasks.</p>"},{"location":"#why-mcp-framework","title":"Why mcp-framework?","text":""},{"location":"#provider-architecture","title":"\ud83c\udfd7\ufe0f Provider Architecture","text":"<ul> <li>Abstract Base Classes: Clean contracts for <code>ResourceProvider</code>, <code>ToolProvider</code>, and <code>PromptProvider</code></li> <li>Plugin Registry: Dynamic provider registration and lifecycle management</li> <li>Framework Separation: Protocol handling vs business logic isolation</li> </ul>"},{"location":"#developer-experience","title":"\ud83d\ude80 Developer Experience","text":"<ul> <li>TypeScript First: Full type safety with strict checking</li> <li>Builder Pattern: Fluent API for server construction</li> <li>Configuration Support: JSON/YAML declarative configuration with environment variable interpolation</li> <li>Plugin Discovery: Automatic provider loading from directories and NPM packages</li> </ul>"},{"location":"#production-ready","title":"\ud83d\udce6 Production Ready","text":"<ul> <li>Health Monitoring: Built-in health checks and metrics endpoints</li> <li>Error Handling: Comprehensive error management with MCP-compliant responses</li> <li>Performance: Connection pooling, caching, and optimization features</li> <li>Security: Input validation, SQL injection prevention, XSS protection</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>import { FrameworkBuilder } from '@debian777/mcp-framework';\n\n// Create a simple MCP server\nconst server = await new FrameworkBuilder()\n  .withTransport('stdio')\n  .withStorage({ type: 'sqlite', path: './data.db' })\n  .build();\n\nawait server.start();\n</code></pre>"},{"location":"#architecture-overview","title":"Architecture Overview","text":"<pre><code>Framework (mcp-framework)\n\u251c\u2500\u2500 Transport Layer (STDIO, HTTP)\n\u251c\u2500\u2500 JSON-RPC Protocol\n\u251c\u2500\u2500 Provider Registry\n\u2514\u2500\u2500 Infrastructure (Storage, Logging, Security)\n\nBusiness Logic (Your Code)\n\u251c\u2500\u2500 ResourceProvider implementations\n\u251c\u2500\u2500 ToolProvider implementations\n\u2514\u2500\u2500 PromptProvider implementations\n</code></pre>"},{"location":"#key-components","title":"Key Components","text":"Component Purpose Key Classes Transport Communication protocols <code>StdioTransport</code>, <code>HttpTransport</code> Server MCP protocol implementation <code>FrameworkServer</code> Providers Business logic abstraction <code>ToolProvider</code>, <code>ResourceProvider</code>, <code>PromptProvider</code> Registry Provider management <code>ProviderRegistry</code> Builder Fluent server construction <code>FrameworkBuilder</code>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Installation: Add mcp-framework to your project</li> <li>Basic Server: Create your first MCP server</li> <li>Adding Providers: Implement tools, resources, and prompts</li> <li>Configuration: Configure your server for production</li> </ol>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>\ud83d\udcd6 Documentation: Comprehensive guides and API reference</li> <li>\ud83d\udc1b Issues: Report bugs and request features</li> <li>\ud83d\udcac Discussions: Ask questions and share ideas</li> <li>\ud83d\udce6 NPM: Install the framework</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p> <p>Built with \u2764\ufe0f for the Model Context Protocol ecosystem</p>"},{"location":"core-concepts/","title":"MCP Framework Core Concepts","text":"<p>Build production-ready MCP servers in minutes, not days. This guide explains the fundamental concepts and architecture of mcp-framework\u2014a modern, type-safe framework that handles all the protocol complexity so you can focus on building amazing AI integrations.</p>"},{"location":"core-concepts/#why-mcp-framework","title":"Why MCP Framework?","text":""},{"location":"core-concepts/#the-problem","title":"The Problem","text":"<p>Building MCP servers from scratch means dealing with: - \u274c Complex JSON-RPC protocol implementation - \u274c Transport layer configuration (STDIO, HTTP, WebSocket) - \u274c Input validation and security concerns - \u274c Boilerplate code for capability negotiation - \u274c Storage and persistence setup</p>"},{"location":"core-concepts/#the-solution","title":"The Solution","text":"<p>mcp-framework provides: - \u2705 Provider-based architecture - Implement simple abstract classes, get full MCP compliance - \u2705 Production-ready infrastructure - Security, validation, logging, monitoring built-in - \u2705 Flexible transports - STDIO for local, HTTP/WebSocket for remote\u2014one line of code - \u2705 Type-safe APIs - Full TypeScript support with strict checking - \u2705 Quick start - From zero to working MCP server in under 5 minutes</p>"},{"location":"core-concepts/#model-context-protocol-mcp","title":"Model Context Protocol (MCP)","text":"<p>MCP is an open protocol that standardizes how AI assistants can securely access external tools and resources. Think of it as a universal plugin system for AI\u2014enabling Claude, ChatGPT, and other assistants to integrate with any external system through a consistent interface.</p>"},{"location":"core-concepts/#the-protocol-architecture","title":"The Protocol Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         JSON-RPC         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   MCP Client    \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502   MCP Server    \u2502\n\u2502  (Claude, etc)  \u2502    Tools, Resources      \u2502  (Your Code)    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        Prompts           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <ul> <li>MCP Clients: AI assistants that want to use external capabilities</li> <li>MCP Servers: Your applications that provide tools, resources, and prompts</li> </ul>"},{"location":"core-concepts/#three-core-capabilities","title":"Three Core Capabilities","text":"<p>MCP defines three types of capabilities that make AI integrations powerful:</p> <ol> <li>\ud83d\udd27 Tools: Actions that clients can invoke (e.g., \"send_email\", \"query_database\", \"deploy_code\")</li> <li>\ud83d\udcda Resources: Data sources that clients can read (e.g., files, documents, API responses)</li> <li>\ud83d\udcac Prompts: Reusable prompt templates for consistent AI interactions</li> </ol>"},{"location":"core-concepts/#framework-architecture","title":"Framework Architecture","text":"<p>mcp-framework uses a clean separation of concerns that lets you focus on your domain logic while the framework handles all protocol complexity:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         Framework Layer (mcp-framework)             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502  Transport: STDIO \u2502 HTTP \u2502 WebSocket       \u2502    \u2502\n\u2502  \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524    \u2502\n\u2502  \u2502  JSON-RPC Protocol Handler                 \u2502    \u2502\n\u2502  \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524    \u2502\n\u2502  \u2502  Provider Registry &amp; Lifecycle             \u2502    \u2502\n\u2502  \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524    \u2502\n\u2502  \u2502  Storage \u2502 Security \u2502 Logging \u2502 Monitoring \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                         \u25b2\n                         \u2502 Simple Abstract Classes\n                         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        Business Logic Layer (Your Code)             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502  ToolProvider implementations              \u2502    \u2502\n\u2502  \u2502  ResourceProvider implementations          \u2502    \u2502\n\u2502  \u2502  PromptProvider implementations            \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"core-concepts/#design-principles","title":"Design Principles","text":"<p>\ud83c\udfaf Separation of Concerns: Framework handles protocol, you handle business logic \ud83d\udd0c Provider Pattern: Implement abstract base classes, get full MCP compliance \ud83e\udde9 Plugin Architecture: Dynamic registration and discovery of providers \ud83d\udee1\ufe0f Type Safety: Full TypeScript support with strict type checking \u26a1 Performance First: Built-in caching, connection pooling, and optimization \ud83d\udcca Observable: Structured logging, metrics, and health checks out of the box</p>"},{"location":"core-concepts/#providers-your-path-to-mcp-compliance","title":"Providers: Your Path to MCP Compliance","text":"<p>Providers are the only code you need to write. Extend abstract base classes, implement a few methods, and you have a production-ready MCP server. No protocol knowledge required.</p>"},{"location":"core-concepts/#toolprovider-give-ai-the-power-to-act","title":"\ud83d\udd27 ToolProvider - Give AI the Power to Act","text":"<p>Tools let AI assistants perform actions in your systems. Think: sending emails, querying databases, deploying code, managing infrastructure.</p> <pre><code>import { ToolProvider } from '@debian777/mcp-framework';\n\nclass DeploymentProvider extends ToolProvider {\n  getToolDefinitions() {\n    return [{\n      name: 'deploy_app',\n      description: 'Deploy application to production',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          app: { type: 'string', description: 'Application name' },\n          version: { type: 'string', description: 'Version to deploy' }\n        },\n        required: ['app', 'version']\n      }\n    }];\n  }\n\n  async callTool(name: string, args: any) {\n    if (name === 'deploy_app') {\n      // Your deployment logic here\n      const result = await this.deployToProduction(args.app, args.version);\n      return {\n        content: [{\n          type: 'text',\n          text: `\u2705 Deployed ${args.app}@${args.version} to production`\n        }]\n      };\n    }\n  }\n}\n</code></pre> <p>What you get: - \u2705 Input validation against your schema (automatic) - \u2705 Error handling with MCP-compliant responses - \u2705 Request tracking and logging - \u2705 Full TypeScript type safety</p>"},{"location":"core-concepts/#resourceprovider-feed-ai-with-context","title":"\ud83d\udcda ResourceProvider - Feed AI with Context","text":"<p>Resources let AI assistants read data from your systems. Think: documentation, logs, configurations, database records, file systems.</p> <pre><code>import { ResourceProvider } from '@debian777/mcp-framework';\n\nclass DocsProvider extends ResourceProvider {\n  getStaticResources() {\n    return [{\n      uri: 'docs://api/getting-started',\n      name: 'Getting Started Guide',\n      description: 'Introduction to our API',\n      mimeType: 'text/markdown'\n    }];\n  }\n\n  async readResource(uri: string) {\n    // Load documentation from your source\n    const content = await this.loadDocumentation(uri);\n\n    return {\n      contents: [{\n        uri,\n        mimeType: 'text/markdown',\n        text: content\n      }]\n    };\n  }\n}\n</code></pre> <p>Powerful features: - \ud83d\udcc2 Static &amp; Dynamic Resources: Pre-defined or runtime-discovered - \ud83d\udd17 Custom URI Schemes: <code>docs://</code>, <code>db://</code>, <code>git://</code> - organize however you want - \ud83c\udfad MIME Type Support: Text, JSON, binary - proper content type handling - \ud83d\udd04 Resource Templates: Dynamic URI generation with parameters</p>"},{"location":"core-concepts/#promptprovider-standardize-ai-interactions","title":"\ud83d\udcac PromptProvider - Standardize AI Interactions","text":"<p>Prompts create reusable templates for consistent AI interactions. Perfect for code reviews, incident response, documentation generation\u2014any workflow that needs consistent prompting.</p> <pre><code>import { PromptProvider } from '@debian777/mcp-framework';\n\nclass CodeReviewProvider extends PromptProvider {\n  getPromptDefinitions() {\n    return [{\n      name: 'review_pr',\n      description: 'Review pull request for best practices',\n      arguments: [{\n        name: 'pr_number',\n        description: 'Pull request number',\n        required: true\n      }]\n    }];\n  }\n\n  async getPrompt(name: string, args?: any) {\n    const prData = await this.fetchPR(args.pr_number);\n\n    return {\n      messages: [\n        {\n          role: 'user',\n          content: {\n            type: 'text',\n            text: `Review PR #${args.pr_number}:\\n${prData.diff}`\n          }\n        }\n      ]\n    };\n  }\n}\n</code></pre> <p>Use cases: - \ud83d\udcdd Code review templates - \ud83d\udea8 Incident response workflows - \ud83d\udcd6 Documentation generation - \ud83d\udd0d Analysis and reporting</p>"},{"location":"core-concepts/#transport-layer-one-line-configuration","title":"Transport Layer: One Line Configuration","text":"<p>Switch between local and remote deployments without changing your provider code. The framework handles all the protocol complexity.</p>"},{"location":"core-concepts/#stdio-transport-local-fast","title":"\ud83d\udda5\ufe0f STDIO Transport - Local &amp; Fast","text":"<p>Perfect for local development, CLI tools, and direct process integration:</p> <pre><code>// One line - that's it!\nconst server = await new FrameworkBuilder()\n  .withTransport('stdio')\n  .build();\n</code></pre> <p>When to use: - \u2705 Local development and testing - \u2705 CLI tool integration - \u2705 Desktop applications - \u2705 Process-to-process communication</p>"},{"location":"core-concepts/#http-transport-remote-scalable","title":"\ud83c\udf10 HTTP Transport - Remote &amp; Scalable","text":"<p>Deploy your MCP server as a web service:</p> <pre><code>const server = await new FrameworkBuilder()\n  .withTransport({\n    mode: 'http',\n    port: 3000,\n    path: '/mcp'\n  })\n  .build();\n</code></pre> <p>Built-in features: - \ud83c\udfe5 Health check endpoints (<code>/health</code>) - \ud83d\udcca Metrics and monitoring (<code>/metrics</code>) - \ud83d\udd10 CORS support - \ud83d\udcdd OpenAPI documentation - \u26a1 Connection pooling</p>"},{"location":"core-concepts/#websocket-transport-real-time","title":"\u26a1 WebSocket Transport - Real-time","text":"<p>For persistent connections and real-time bidirectional communication:</p> <pre><code>const server = await new FrameworkBuilder()\n  .withTransport({\n    mode: 'websocket',\n    port: 3001,\n    path: '/mcp-ws'\n  })\n  .build();\n</code></pre> <p>Perfect for: - \ud83d\udd04 Real-time updates - \ud83d\udce1 Streaming data - \ud83d\udcac Interactive sessions - \ud83c\udfae Low-latency applications</p>"},{"location":"core-concepts/#storage-abstraction","title":"Storage Abstraction","text":"<p>mcp-framework provides a unified storage interface for persisting data:</p> <pre><code>interface StorageInterface {\n  save(input: SaveInput): Promise&lt;MemoryItem&gt;;\n  load(filter: LoadFilter): Promise&lt;MemoryItem[]&gt;;\n  update(id: string, input: UpdateInput): Promise&lt;MemoryItem&gt;;\n  delete(id: string): Promise&lt;void&gt;;\n}\n</code></pre>"},{"location":"core-concepts/#built-in-backends","title":"Built-in Backends","text":"<ul> <li>SQLite: Local file-based storage, good for development</li> <li>PostgreSQL: Production-ready relational database</li> <li>Custom: Implement your own storage backend</li> </ul>"},{"location":"core-concepts/#storage-configuration","title":"Storage Configuration","text":"<pre><code>const server = await new FrameworkBuilder()\n  .withStorage({\n    type: 'sqlite',\n    path: './data.db'\n  })\n  .build();\n</code></pre>"},{"location":"core-concepts/#configuration-system","title":"Configuration System","text":"<p>mcp-framework supports multiple configuration approaches:</p>"},{"location":"core-concepts/#environment-variables","title":"Environment Variables","text":"<pre><code>MCP_TRANSPORT_MODE=stdio\nMCP_STORAGE_TYPE=sqlite\nMCP_LOG_LEVEL=debug\n</code></pre>"},{"location":"core-concepts/#configuration-files","title":"Configuration Files","text":"<pre><code>{\n  \"server\": {\n    \"name\": \"my-mcp-server\",\n    \"version\": \"1.0.0\"\n  },\n  \"transport\": {\n    \"modes\": [\"stdio\"],\n    \"maxConcurrency\": 16\n  },\n  \"storage\": {\n    \"type\": \"sqlite\",\n    \"path\": \"./data.db\"\n  }\n}\n</code></pre>"},{"location":"core-concepts/#programmatic-configuration","title":"Programmatic Configuration","text":"<pre><code>const server = await new FrameworkBuilder()\n  .withTransport('stdio')\n  .withStorage({ type: 'sqlite', path: './data.db' })\n  .withToolProvider(new MyToolProvider())\n  .build();\n</code></pre>"},{"location":"core-concepts/#error-handling","title":"Error Handling","text":"<p>mcp-framework provides comprehensive error handling:</p>"},{"location":"core-concepts/#mcp-error-codes","title":"MCP Error Codes","text":"<ul> <li><code>-32700</code>: Parse error</li> <li><code>-32600</code>: Invalid request</li> <li><code>-32601</code>: Method not found</li> <li><code>-32602</code>: Invalid params</li> <li><code>-32603</code>: Internal error</li> <li><code>-32000</code>: Server error (custom)</li> </ul>"},{"location":"core-concepts/#error-responses","title":"Error Responses","text":"<pre><code>return {\n  jsonrpc: '2.0',\n  id: requestId,\n  error: {\n    code: -32000,\n    message: 'Something went wrong',\n    data: { details: 'Additional error information' }\n  }\n};\n</code></pre>"},{"location":"core-concepts/#framework-error-handling","title":"Framework Error Handling","text":"<p>The framework automatically handles: - Transport-level errors - JSON-RPC protocol errors - Provider execution errors - Configuration validation errors</p>"},{"location":"core-concepts/#security-considerations","title":"Security Considerations","text":""},{"location":"core-concepts/#input-validation","title":"Input Validation","text":"<ul> <li>All inputs validated against schemas</li> <li>Type coercion and sanitization</li> <li>Size limits enforced</li> <li>SQL injection prevention</li> </ul>"},{"location":"core-concepts/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<ul> <li>Framework provides auth hooks</li> <li>Implementations define specific mechanisms</li> <li>Secure credential storage</li> <li>Token validation and refresh</li> </ul>"},{"location":"core-concepts/#transport-security","title":"Transport Security","text":"<ul> <li>STDIO transport for local communication</li> <li>HTTPS support for HTTP transport</li> <li>Connection encryption</li> <li>Certificate validation</li> </ul>"},{"location":"core-concepts/#performance-optimization","title":"Performance Optimization","text":""},{"location":"core-concepts/#connection-pooling","title":"Connection Pooling","text":"<ul> <li>Database connection pooling</li> <li>HTTP client connection reuse</li> <li>Resource cleanup on shutdown</li> <li>Connection health monitoring</li> </ul>"},{"location":"core-concepts/#caching","title":"Caching","text":"<ul> <li>Built-in caching for expensive operations</li> <li>Configurable TTL and size limits</li> <li>Cache invalidation strategies</li> <li>Memory-efficient implementations</li> </ul>"},{"location":"core-concepts/#monitoring","title":"Monitoring","text":"<ul> <li>Health check endpoints</li> <li>Performance metrics</li> <li>Request tracing</li> <li>Error tracking</li> </ul>"},{"location":"core-concepts/#plugin-system","title":"Plugin System","text":"<p>mcp-framework supports dynamic provider loading:</p>"},{"location":"core-concepts/#plugin-discovery","title":"Plugin Discovery","text":"<pre><code>const server = await new FrameworkBuilder()\n  .withPluginDiscovery({\n    directories: ['./plugins'],\n    npmPackages: ['@my-org/mcp-plugins']\n  })\n  .build();\n</code></pre>"},{"location":"core-concepts/#plugin-structure","title":"Plugin Structure","text":"<pre><code>my-plugin/\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 index.ts  // Exports provider instances\n\u2514\u2500\u2500 dist/\n    \u2514\u2500\u2500 index.js\n</code></pre>"},{"location":"core-concepts/#best-practices-for-hackathon-success","title":"Best Practices for Hackathon Success","text":""},{"location":"core-concepts/#provider-design","title":"\ud83c\udfaf Provider Design","text":"<p>Single Responsibility Each provider focuses on one domain. Better to have 3 small providers than 1 giant one.</p> <pre><code>\u2705 Good: EmailProvider, SlackProvider, PagerDutyProvider\n\u274c Bad: NotificationProvider (doing everything)\n</code></pre> <p>Type Safety First Use TypeScript interfaces\u2014catch errors at compile time, not runtime.</p> <pre><code>interface DeploymentArgs {\n  app: string;\n  version: string;\n  environment: 'staging' | 'production';\n}\n\nasync callTool(name: string, args: DeploymentArgs) { /* ... */ }\n</code></pre> <p>Clear Documentation AI assistants read your descriptions\u2014make them count!</p> <pre><code>\u2705 Good: \"Deploy application to production environment with health checks\"\n\u274c Bad: \"Deploy stuff\"\n</code></pre>"},{"location":"core-concepts/#performance-tips","title":"\u26a1 Performance Tips","text":"<p>Async Everything Use <code>async/await</code> for all I/O operations\u2014never block the event loop.</p> <p>Smart Caching Cache expensive operations, but invalidate properly:</p> <pre><code>private cache = new Map&lt;string, { data: any, timestamp: number }&gt;();\n\nasync readResource(uri: string) {\n  const cached = this.cache.get(uri);\n  if (cached &amp;&amp; Date.now() - cached.timestamp &lt; 60000) {\n    return cached.data;  // Cache hit!\n  }\n  // Fetch fresh data...\n}\n</code></pre> <p>Resource Limits Always implement timeouts and size limits:</p> <pre><code>const result = await Promise.race([\n  this.expensiveOperation(),\n  new Promise((_, reject) =&gt;\n    setTimeout(() =&gt; reject(new Error('Timeout')), 5000)\n  )\n]);\n</code></pre>"},{"location":"core-concepts/#security-essentials","title":"\ud83d\udee1\ufe0f Security Essentials","text":"<p>Validate Everything The framework validates against your schemas, but add business logic checks:</p> <pre><code>async callTool(name: string, args: any) {\n  // Schema validation happens automatically\n  // Add business logic validation:\n  if (args.amount &gt; MAX_ALLOWED) {\n    throw new Error('Amount exceeds limit');\n  }\n}\n</code></pre> <p>Safe Error Messages Don't leak internal details:</p> <pre><code>\u2705 Good: \"Database connection failed\"\n\u274c Bad: \"Connection to postgres://admin:pass123@internal-db:5432 failed\"\n</code></pre> <p>Access Control Implement authorization checks for sensitive operations:</p> <pre><code>async callTool(name: string, args: any, requestId?: string) {\n  if (name === 'delete_production_data') {\n    // Check permissions before executing!\n    await this.checkAdminPermission(requestId);\n  }\n}\n</code></pre>"},{"location":"core-concepts/#testing-strategy","title":"\ud83e\uddea Testing Strategy","text":"<p>Quick Testing with MCP Inspector Test your server in minutes:</p> <pre><code>npm install -g @modelcontextprotocol/inspector\nmcp-inspector node dist/server.js\n</code></pre> <p>Unit Test Your Providers Test business logic independently:</p> <pre><code>describe('EmailProvider', () =&gt; {\n  it('sends email with correct parameters', async () =&gt; {\n    const provider = new EmailProvider();\n    const result = await provider.callTool('send_email', {\n      to: 'test@example.com',\n      subject: 'Test'\n    });\n    expect(result.content[0].text).toContain('Email sent');\n  });\n});\n</code></pre> <p>Integration Tests Test the complete server:</p> <pre><code>const server = await new FrameworkBuilder()\n  .withTransport('stdio')\n  .withToolProvider(new EmailProvider())\n  .build();\n\nawait server.start();\n// Test MCP protocol interactions...\n</code></pre>"},{"location":"core-concepts/#migration-guide","title":"Migration Guide","text":""},{"location":"core-concepts/#from-custom-mcp-servers","title":"From Custom MCP Servers","text":"<p>If you're migrating from a custom MCP server implementation:</p> <ol> <li>Identify Components: Extract your tools, resources, and prompts</li> <li>Create Providers: Implement the appropriate provider interfaces</li> <li>Update Configuration: Migrate to framework configuration system</li> <li>Test Thoroughly: Ensure all functionality works as expected</li> </ol>"},{"location":"core-concepts/#from-other-frameworks","title":"From Other Frameworks","text":"<p>When migrating from other MCP frameworks:</p> <ol> <li>Preserve Business Logic: Keep your core functionality intact</li> <li>Adapt Interfaces: Update to mcp-framework provider interfaces</li> <li>Update Dependencies: Replace old framework dependencies</li> <li>Test Integration: Verify compatibility with your MCP clients</li> </ol>"},{"location":"core-concepts/#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Plugin Development</li> <li>Custom Storage Backends</li> <li>Transport Extensions</li> <li>Performance Tuning</li> </ul>"},{"location":"core-concepts/#quick-start-build-your-first-mcp-server","title":"Quick Start: Build Your First MCP Server","text":"<p>Ready to start building? Here's a complete working example:</p> <pre><code>import { FrameworkBuilder, ToolProvider } from '@debian777/mcp-framework';\n\n// 1. Create your provider\nclass HackerProvider extends ToolProvider {\n  getToolDefinitions() {\n    return [{\n      name: 'hack_the_planet',\n      description: 'The classic hack',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          target: { type: 'string' }\n        },\n        required: ['target']\n      }\n    }];\n  }\n\n  async callTool(name: string, args: any) {\n    return {\n      content: [{\n        type: 'text',\n        text: `\ud83c\udfaf ${args.target} has been hacked! (Just kidding \ud83d\ude09)`\n      }]\n    };\n  }\n}\n\n// 2. Build and start server (3 lines!)\nconst server = await new FrameworkBuilder()\n  .withTransport('stdio')\n  .withToolProvider(new HackerProvider())\n  .build();\n\nawait server.start();\n</code></pre> <p>That's it! You now have a working MCP server. \ud83d\ude80</p>"},{"location":"core-concepts/#hackathon-pro-tips","title":"Hackathon Pro Tips","text":""},{"location":"core-concepts/#winning-strategy","title":"\ud83c\udfc6 Winning Strategy","text":"<ol> <li>Start Simple: Get one provider working end-to-end first</li> <li>Use Examples: Copy from examples/ directory</li> <li>Test Early: Use MCP Inspector to test as you build</li> <li>Add Polish: Health checks, logging, metrics make you stand out</li> <li>Document: Great README = great impression</li> </ol>"},{"location":"core-concepts/#time-saving-shortcuts","title":"\u23f1\ufe0f Time-Saving Shortcuts","text":"<p>Use the builder pattern: <pre><code>const server = await new FrameworkBuilder()\n  .withTransport('stdio')\n  .withStorage({ type: 'sqlite', path: './data.db' })\n  .withToolProvider(provider1)\n  .withToolProvider(provider2)  // Chain multiple providers!\n  .withResourceProvider(provider3)\n  .build();\n</code></pre></p> <p>Enable debug logging: <pre><code>MCP_LOG_LEVEL=debug node dist/server.js\n</code></pre></p> <p>Test with curl (HTTP transport): <pre><code>curl http://localhost:3000/health\ncurl http://localhost:3000/mcp -d '{\"jsonrpc\":\"2.0\",\"method\":\"tools/list\",\"id\":1}'\n</code></pre></p>"},{"location":"core-concepts/#demo-ideas","title":"\ud83c\udfaa Demo Ideas","text":"<ul> <li>\ud83e\udd16 DevOps Assistant: Deploy, monitor, rollback with AI</li> <li>\ud83d\udcca Analytics Explorer: Query databases, generate reports</li> <li>\ud83d\udd10 Security Toolkit: Scan, audit, generate policies</li> <li>\ud83d\udcdd Documentation Bot: Generate docs from code</li> <li>\ud83c\udfae Game Master: AI-powered game mechanics</li> </ul>"},{"location":"core-concepts/#next-steps","title":"Next Steps","text":"<p>\ud83d\ude80 Getting Started Guide - Your first MCP server in 5 minutes \ud83d\udd27 Tools Guide - Deep dive into tool development \ud83d\udcda Examples - Complete working examples \ud83d\udcd6 API Reference - Detailed API documentation</p> <p>Questions? Check out our GitHub Discussions or dive into the code!</p> <p>Built for the Model Context Protocol ecosystem. Made for hackathons. Designed for production. \ud83c\udfaf</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will walk you through setting up and creating your first MCP server using mcp-framework.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js 20+: Required for ESM modules and modern JavaScript features</li> <li>TypeScript: For type-safe development (optional but recommended)</li> <li>Basic MCP Knowledge: Familiarity with the Model Context Protocol</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>Install mcp-framework using npm:</p> <pre><code>npm install @debian777/mcp-framework\n</code></pre> <p>Or using yarn:</p> <pre><code>yarn add @debian777/mcp-framework\n</code></pre>"},{"location":"getting-started/#basic-server-setup","title":"Basic Server Setup","text":"<p>Create a simple MCP server that responds to basic protocol messages:</p> <pre><code>import { FrameworkBuilder } from '@debian777/mcp-framework';\n\n// Create a basic MCP server\nconst server = await new FrameworkBuilder()\n  .withTransport('stdio')  // Use STDIO transport for local development\n  .build();\n\n// Start the server\nawait server.start();\nconsole.log('MCP server is running...');\n</code></pre> <p>Save this as <code>server.ts</code> and run it:</p> <pre><code>npx tsx server.ts\n</code></pre> <p>This creates a minimal MCP server that can handle the basic protocol handshake but doesn't provide any tools, resources, or prompts yet.</p>"},{"location":"getting-started/#adding-providers","title":"Adding Providers","text":""},{"location":"getting-started/#tool-provider","title":"Tool Provider","text":"<p>Tools allow AI assistants to perform actions. Here's how to create a calculator tool:</p> <pre><code>import { ToolProvider } from '@debian777/mcp-framework';\n\nclass CalculatorProvider extends ToolProvider {\n  getToolDefinitions() {\n    return [{\n      name: 'calculate',\n      description: 'Perform mathematical calculations',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          expression: { type: 'string', description: 'Math expression to evaluate' }\n        },\n        required: ['expression']\n      }\n    }];\n  }\n\n  async callTool(name: string, args: any) {\n    if (name === 'calculate') {\n      try {\n        // Note: In production, use a safe math evaluation library\n        const result = eval(args.expression);\n        return {\n          content: [{ type: 'text', text: `Result: ${result}` }]\n        };\n      } catch (error) {\n        return {\n          content: [{ type: 'text', text: `Error: Invalid expression` }],\n          isError: true\n        };\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"getting-started/#resource-provider","title":"Resource Provider","text":"<p>Resources provide access to data that AI assistants can read:</p> <pre><code>import { ResourceProvider } from '@debian777/mcp-framework';\n\nclass FileSystemProvider extends ResourceProvider {\n  getStaticResources() {\n    return [{\n      uri: 'file://workspace',\n      name: 'Workspace Files',\n      description: 'Access to workspace files',\n      mimeType: 'application/json'\n    }];\n  }\n\n  async readResource(uri: string) {\n    if (uri === 'file://workspace') {\n      const files = await fs.readdir('.');\n      return {\n        contents: [{\n          uri,\n          mimeType: 'application/json',\n          text: JSON.stringify({ files }, null, 2)\n        }]\n      };\n    }\n    throw new Error(`Unknown resource: ${uri}`);\n  }\n}\n</code></pre>"},{"location":"getting-started/#prompt-provider","title":"Prompt Provider","text":"<p>Prompts provide reusable prompt templates:</p> <pre><code>import { PromptProvider } from '@debian777/mcp-framework';\n\nclass CodeReviewProvider extends PromptProvider {\n  getPromptDefinitions() {\n    return [{\n      name: 'code-review',\n      description: 'Generate a code review prompt for the given code'\n    }];\n  }\n\n  async getPrompt(name: string, args?: any) {\n    if (name === 'code-review') {\n      return {\n        description: 'Code review assistant prompt',\n        messages: [{\n          role: 'user',\n          content: {\n            type: 'text',\n            text: `Please review the following code for best practices, potential bugs, and improvements:\\n\\n${args?.code || 'No code provided'}`\n          }\n        }]\n      };\n    }\n  }\n}\n</code></pre>"},{"location":"getting-started/#complete-server-example","title":"Complete Server Example","text":"<p>Now let's combine all providers into a complete server:</p> <pre><code>import { FrameworkBuilder } from '@debian777/mcp-framework';\nimport { CalculatorProvider } from './providers/calculator.js';\nimport { FileSystemProvider } from './providers/filesystem.js';\nimport { CodeReviewProvider } from './providers/code-review.js';\n\n// Create and configure the server\nconst server = await new FrameworkBuilder()\n  .withTransport('stdio')\n  .withStorage({ type: 'sqlite', path: './data.db' })\n  .withToolProvider(new CalculatorProvider())\n  .withResourceProvider(new FileSystemProvider())\n  .withPromptProvider(new CodeReviewProvider())\n  .build();\n\n// Start the server\nawait server.start();\nconsole.log('MCP server with calculator, filesystem, and code review providers is running...');\n</code></pre>"},{"location":"getting-started/#configuration","title":"Configuration","text":""},{"location":"getting-started/#environment-variables","title":"Environment Variables","text":"<p>Configure your server using environment variables:</p> <pre><code># Transport settings\nMCP_TRANSPORT_MODE=stdio\nMCP_HTTP_PORT=3000\n\n# Storage settings\nMCP_STORAGE_TYPE=sqlite\nMCP_DATABASE_URL=./data.db\n\n# Logging\nMCP_LOG_LEVEL=debug\n</code></pre>"},{"location":"getting-started/#declarative-configuration","title":"Declarative Configuration","text":"<p>Create a <code>config.json</code> file for more complex configurations:</p> <pre><code>{\n  \"server\": {\n    \"name\": \"my-mcp-server\",\n    \"version\": \"1.0.0\"\n  },\n  \"transport\": {\n    \"modes\": [\"stdio\"],\n    \"maxConcurrency\": 16\n  },\n  \"storage\": {\n    \"type\": \"sqlite\",\n    \"path\": \"./data.db\"\n  },\n  \"logging\": {\n    \"level\": \"info\",\n    \"format\": \"json\"\n  }\n}\n</code></pre> <p>Load it in your server:</p> <pre><code>import { FrameworkBuilder } from '@debian777/mcp-framework';\n\nconst server = await new FrameworkBuilder()\n  .withConfigFile('./config.json')\n  .withToolProvider(new CalculatorProvider())\n  .build();\n</code></pre>"},{"location":"getting-started/#testing-your-server","title":"Testing Your Server","text":"<p>Test your MCP server using the MCP Inspector:</p> <pre><code># Install MCP Inspector globally\nnpm install -g @modelcontextprotocol/inspector\n\n# Run your server with the inspector\nmcp-inspector npx tsx server.ts\n</code></pre> <p>This will open a web interface where you can test your tools, resources, and prompts.</p>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Core Concepts: Learn about the framework architecture</li> <li>Tools Guide: Deep dive into tool development</li> <li>Resources Guide: Learn about resource providers</li> <li>Examples: See more complete examples</li> <li>Deployment: Deploy your server to production</li> </ul>"},{"location":"getting-started/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/#common-issues","title":"Common Issues","text":"<p>\"Module not found\" errors - Ensure you're using Node.js 20+ - Check that all dependencies are installed</p> <p>Transport connection errors - Verify the transport mode is correct for your use case - Check that ports are available for HTTP transport</p> <p>Provider registration failures - Ensure your providers extend the correct abstract base classes - Check that all required methods are implemented</p>"},{"location":"getting-started/#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Issues: Report bugs</li> <li>GitHub Discussions: Ask questions</li> <li>Documentation: Comprehensive guides</li> </ul>"},{"location":"api/COMPATIBILITY/","title":"Compatibility Matrix","text":"Framework Version Node.js LTS Notes 1.x 18, 20 Initial GA 2.x 20, 22 Dropped Node 18 support"},{"location":"api/COMPATIBILITY/#deprecation-policy","title":"Deprecation Policy","text":"<ul> <li>Functions flagged as deprecated remain for \u22651 minor release before removal.</li> <li>Deprecation must be noted in:</li> <li>README.md</li> <li>CHANGELOG.md</li> <li>Inline JSDoc <code>@deprecated</code> tag</li> </ul>"},{"location":"api/COMPATIBILITY/#example","title":"Example","text":"<p>```js /*  * @deprecated Use greet(name) instead.  / export function hello(name) {   return greet(name); }</p>"},{"location":"guides/mcp-best-practices/","title":"\ud83d\udcd8 MCP Server Best Practices Guide","text":"<p>This guide provides a baseline for any new MCP server project. It focuses on creating the best possible information flow between servers, clients, and AI agents.</p>"},{"location":"guides/mcp-best-practices/#initialize-result-handshake","title":"\ud83d\udd39 Initialize Result (Handshake)","text":"<p>Every MCP server must respond to <code>initialize</code> with an <code>initialize_result</code> object.</p>"},{"location":"guides/mcp-best-practices/#required-fields","title":"Required fields","text":"<ul> <li><code>protocolVersion</code> \u2013 MCP spec version (e.g., <code>\"2024-11-05\"</code>).</li> <li><code>capabilities</code> \u2013 advertise supported APIs (resources, tools, logging, etc.).</li> <li><code>serverInfo</code> \u2013 name, title, version.</li> <li><code>instructions</code> \u2013 optional usage instructions.</li> <li><code>meta</code> \u2013 optional metadata.</li> </ul>"},{"location":"guides/mcp-best-practices/#example","title":"Example","text":"<pre><code>{\n  \"initialize_result\": {\n    \"protocolVersion\": \"2024-11-05\",\n    \"capabilities\": {\n      \"resources\": { \"subscribe\": true, \"listChanged\": true },\n      \"tools\": { \"listChanged\": true },\n      \"logging\": null,\n      \"prompts\": null,\n      \"completions\": null,\n      \"experimental\": null\n    },\n    \"serverInfo\": {\n      \"name\": \"mcp-yourserver\",\n      \"title\": \"Your Server\",\n      \"version\": \"0.1.0\"\n    },\n    \"instructions\": \"Use resources to fetch data, tools to act on it.\",\n    \"meta\": null\n  }\n}\n</code></pre>"},{"location":"guides/mcp-best-practices/#tools","title":"\ud83d\udd39 Tools","text":"<p>Tools expose functions the server can execute. They must be self-explanatory to both humans and AI.</p>"},{"location":"guides/mcp-best-practices/#required-information","title":"Required information","text":"<ul> <li>Name \u2013 short, machine-safe ID (<code>workflow_log_execution</code>).</li> <li>Description \u2013 must include:</li> <li>Purpose (what problem it solves).</li> <li>Parameters explained (especially required ones).</li> <li>Scope/constraints (when/when not to use).</li> <li>At least one example call with input/output JSON.</li> <li>Input Schema \u2013 JSON Schema with clear <code>description</code>, <code>required</code>, and constraints.</li> <li>Output Schema \u2013 JSON Schema with explicit result fields.</li> </ul>"},{"location":"guides/mcp-best-practices/#best-practices","title":"Best practices","text":"<ul> <li>Use consistent naming (<code>domain_action</code> style: <code>memory_store</code>, <code>workflow_log_execution</code>).</li> <li>Make tools idempotent where possible.</li> <li>Keep inputs minimal but expressive.</li> <li>Validate with enums, patterns, and ranges.</li> <li>Always document outputs with <code>status</code> or <code>result</code>.</li> </ul>"},{"location":"guides/mcp-best-practices/#example-tool","title":"Example Tool","text":"<pre><code>{\n  \"name\": \"memory_store\",\n  \"description\": \"Store information in memory. Example: { \\\"resource\\\": \\\"ci-pipeline\\\", \\\"task\\\": \\\"setup-vault\\\", \\\"type\\\": \\\"rule\\\", \\\"description\\\": \\\"Vault must pass CIS checks\\\" }\",\n  \"inputSchema\": { \"type\": \"object\", \"properties\": { \"resource\": { \"type\": \"string\" } }, \"required\": [\"resource\"] },\n  \"outputSchema\": { \"type\": \"object\", \"properties\": { \"id\": { \"type\": \"string\" }, \"status\": { \"type\": \"string\" } }, \"required\": [\"id\",\"status\"] }\n}\n</code></pre>"},{"location":"guides/mcp-best-practices/#resources","title":"\ud83d\udd39 Resources","text":"<p>Resources represent static or dynamic data that clients can fetch.</p>"},{"location":"guides/mcp-best-practices/#required-information_1","title":"Required information","text":"<ul> <li>URI \u2013 unique and stable (<code>docs://agent-quick-start</code>).</li> <li>Name \u2013 human-friendly (<code>Agent Quick Start Guide</code>).</li> <li>Description \u2013 clear statement of purpose.</li> <li>MIME type \u2013 guides clients on handling (<code>text/markdown</code>, <code>application/json</code>).</li> </ul>"},{"location":"guides/mcp-best-practices/#best-practices_1","title":"Best practices","text":"<ul> <li>Use URI schemes to group (<code>docs://</code>, <code>memory://</code>, <code>config://</code>).</li> <li>Include sample payloads in descriptions when possible.</li> <li>Mark resources as <code>subscribe</code> if they support live updates.</li> </ul>"},{"location":"guides/mcp-best-practices/#example-resource","title":"Example Resource","text":"<pre><code>{\n  \"uri\": \"docs://jsonrpc-examples\",\n  \"name\": \"JSON-RPC Examples\",\n  \"description\": \"Complete request/response examples for all MCP tools\",\n  \"mimeType\": \"text/markdown\"\n}\n</code></pre>"},{"location":"guides/mcp-best-practices/#instructions-metadata","title":"\ud83d\udd39 Instructions &amp; Metadata","text":"<ul> <li>Instructions: Tell clients how to interact.</li> <li>Order of tool usage.</li> <li>Error handling guidance.</li> <li> <p>Context or security notes.</p> </li> <li> <p>Meta: Use for additional project metadata.</p> </li> <li>Authors, license, tags, compliance info.</li> <li>Example:     <pre><code>\"meta\": {\n  \"author\": \"Platform Engineering\",\n  \"tags\": [\"memory\",\"logging\",\"workflows\"],\n  \"compliance\": [\"CIS\",\"DORA\"]\n}\n</code></pre></li> </ul>"},{"location":"guides/mcp-best-practices/#information-flow-principles","title":"\ud83d\udd39 Information Flow Principles","text":"<ol> <li>Clarity \u2013 every tool/resource should be understandable without external docs.  </li> <li>Self-documentation \u2013 descriptions must include usage examples.  </li> <li>Consistency \u2013 naming, schema style, and metadata must be uniform.  </li> <li>Versioning \u2013 semantic versioning in <code>serverInfo.version</code>.  </li> <li>Safety \u2013 tools should be idempotent and validate inputs strictly.  </li> <li>Discoverability \u2013 resources and tools should be easy to enumerate (<code>listChanged</code> events).  </li> </ol>"},{"location":"guides/mcp-best-practices/#final-checklist-for-new-projects","title":"\u2705 Final Checklist for New Projects","text":"<ul> <li>[ ] Does <code>initialize_result</code> include all required fields?  </li> <li>[ ] Do all tools have clear descriptions with examples?  </li> <li>[ ] Are input/output schemas strict and validated?  </li> <li>[ ] Are resources well-described with stable URIs?  </li> <li>[ ] Does <code>instructions</code> guide AI agents effectively?  </li> <li>[ ] Is <code>meta</code> used for authorship, compliance, or tags?  </li> </ul> <p>\ud83d\udccc Use this guide as a baseline for all new MCP projects to ensure high-quality, self-explanatory, and AI-friendly information flow.</p>"}]}